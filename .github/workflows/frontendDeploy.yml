name: Deploy Next.js to EC2 with Nginx

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      PROJECT_DIR: frontend
      REMOTE_DIR: /home/ubuntu/careear-frontend

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"

      - name: Install Dependencies
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm install

      - name: Create .env File
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "NEXT_PUBLIC_BACKEND_URL=${{ vars.NEXT_PUBLIC_BACKEND_URL }}" > .env

      - name: Build Next.js Application
        working-directory: ${{ env.PROJECT_DIR }}
        run: npm run build

      - name: Install SSH Client
        run: sudo apt-get install -y openssh-client

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.EC2_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        env:
          SSH_USER: ${{ secrets.EC2_USER }}
          SSH_HOST: ${{ secrets.EC2_IP }}
          SSH_KEY: ${{ secrets.EC2_PASSWORD }}
        run: |
          # Setup SSH key
          echo "$SSH_KEY" | tr -d '\r' > /tmp/ec2_key.pem
          chmod 600 /tmp/ec2_key.pem

          # Create remote directory and set permissions
          ssh -i /tmp/ec2_key.pem $SSH_USER@$SSH_HOST "mkdir -p ${{ env.REMOTE_DIR }}"

          # Copy build files
          rsync -avz --delete -e "ssh -i /tmp/ec2_key.pem" \
            ${{ env.PROJECT_DIR }}/.next/ \
            ${{ env.PROJECT_DIR }}/package.json \
            $SSH_USER@$SSH_HOST:${{ env.REMOTE_DIR }}/

          # Setup and start application
          ssh -i /tmp/ec2_key.pem $SSH_USER@$SSH_HOST << 'EOF'
            cd ${{ env.REMOTE_DIR }}
            
            # Create production .env
            echo "NEXT_PUBLIC_BACKEND_URL=${{ vars.NEXT_PUBLIC_BACKEND_URL }}" > .env
            
            # Install production dependencies
            npm ci --production
            
            # Setup PM2
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
            fi
            
            # Restart application
            pm2 delete careear-frontend || true
            pm2 start npm --name careear-frontend -- start -- -p 3000
            pm2 save
            
            # Restart Nginx
            sudo systemctl restart nginx
          EOF